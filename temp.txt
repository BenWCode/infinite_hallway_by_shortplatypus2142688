import * as THREE from 'three';
import { PointerLockControls } from 'three/addons/controls/PointerLockControls.js';
import { HallwayGenerator } from './hallwayGenerator.js';

// Scene setup
const scene = new THREE.Scene();
scene.background = new THREE.Color(0x000000);
scene.fog = new THREE.Fog(0x000000, 5, 30);

// Camera setup
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.y = 1.7; // Eye level

// Renderer
const renderer = new THREE.WebGLRenderer({ antialias: true });
renderer.setSize(window.innerWidth, window.innerHeight);
renderer.shadowMap.enabled = true;
document.body.appendChild(renderer.domElement);

// Lighting
const ambientLight = new THREE.AmbientLight(0x404040);
scene.add(ambientLight);

const directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);
directionalLight.position.set(1, 1, 1);
scene.add(directionalLight);

// Add point lights in the hallway
const createPointLight = (position) => {
    const light = new THREE.PointLight(0xffaa55, 0.8, 15);
    light.position.copy(position);
    light.position.y += 2.5; // Position lights on the ceiling
    light.castShadow = true;
    scene.add(light);
    return light;
};

// Controls
const controls = new PointerLockControls(camera, document.body);

// Movement variables
const velocity = new THREE.Vector3();
const direction = new THREE.Vector3();
let moveForward = false;
let moveBackward = false;
let moveLeft = false;
let moveRight = false;

// Create hallway generator
const hallwayGenerator = new HallwayGenerator(scene, 50); // Generate 50 segments ahead
const lights = [];

// Initialize hallway
hallwayGenerator.initialize();

// Update player position and hallway based on movement
function updatePosition() {
    const playerPosition = controls.getObject().position;
    
    // Check if player has moved far enough to generate new segments
    hallwayGenerator.update(playerPosition);
    
    // Update lights based on player position
    updateLights(playerPosition);
}

// Manage lights - create and remove as player moves
function updateLights(playerPosition) {
    // Remove distant lights
    for (let i = lights.length - 1; i >= 0; i--) {
        if (lights[i].position.distanceTo(playerPosition) > 30) {
            scene.remove(lights[i]);
            lights.splice(i, 1);
        }
    }
    
    // Add new lights near the player
    const segments = hallwayGenerator.getVisibleSegments(playerPosition);
    for (const segment of segments) {
        // Check if a light already exists nearby
        const lightExists = lights.some(light => light.position.distanceTo(segment.center) < 1); // Check within 1 unit
        
        if (segment.needsLight && lights.length < 15 && !lightExists) { // Limit the number of lights
            const light = createPointLight(segment.center);
            lights.push(light);
            segment.needsLight = false; // Mark segment as having a light
        }
    }
}

// Event listeners
const instructions = document.getElementById('instructions');
const fpsCounter = document.getElementById('fpsCounter'); // Get FPS counter element

instructions.addEventListener('click', function () {
    controls.lock();
});

controls.addEventListener('lock', function () {
    instructions.classList.add('hidden');
});

controls.addEventListener('unlock', function () {
    instructions.classList.remove('hidden');
});

document.addEventListener('keydown', function (event) {
    switch (event.code) {
        case 'KeyW':
        case 'ArrowUp':
            moveForward = true;
            break;
        case 'KeyA':
        case 'ArrowLeft':
            moveLeft = true;
            break;
        case 'KeyS':
        case 'ArrowDown':
            moveBackward = true;
            break;
        case 'KeyD':
        case 'ArrowRight':
            moveRight = true;
            break;
    }
});

document.addEventListener('keyup', function (event) {
    switch (event.code) {
        case 'KeyW':
        case 'ArrowUp':
            moveForward = false;
            break;
        case 'KeyA':
        case 'ArrowLeft':
            moveLeft = false;
            break;
        case 'KeyS':
        case 'ArrowDown':
            moveBackward = false;
            break;
        case 'KeyD':
        case 'ArrowRight':
            moveRight = false;
            break;
    }
});

window.addEventListener('resize', function () {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
});

// Movement variables
const speed = 5.0;
const clock = new THREE.Clock();

// FPS Counter variables
let lastFrameTime = performance.now();
let frameCount = 0;
let lastFPSUpdateTime = performance.now();

// Animation loop
function animate() {
    requestAnimationFrame(animate);

    const now = performance.now();
    const delta = clock.getDelta();

    // FPS Calculation
    frameCount++;
    if (now > lastFPSUpdateTime + 1000) { // Update FPS every second
        const fps = Math.round((frameCount * 1000) / (now - lastFPSUpdateTime));
        fpsCounter.textContent = `FPS: ${fps}`;
        frameCount = 0;
        lastFPSUpdateTime = now;
    }
    lastFrameTime = now;


    if (controls.isLocked) {
        // Calculate velocity based on movement keys
        velocity.x = 0;
        velocity.z = 0;

        direction.z = Number(moveForward) - Number(moveBackward);
        direction.x = Number(moveRight) - Number(moveLeft);
        direction.normalize();

        if (moveForward || moveBackward) velocity.z -= direction.z * speed * delta;
        if (moveLeft || moveRight) velocity.x -= direction.x * speed * delta;

        // Update controls
        controls.moveRight(-velocity.x);
        controls.moveForward(-velocity.z);

        // Update hallway based on new position
        updatePosition();
    }

    renderer.render(scene, camera);
}

animate();